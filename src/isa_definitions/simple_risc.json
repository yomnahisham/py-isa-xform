{
  "name": "SimpleRISC16",
  "version": "1.0",
  "description": "A simple 16-bit RISC processor for educational purposes",
  "instruction_size": 16,
  "word_size": 16,
  "endianness": "little",
  "address_space": {
    "size": 65536,
    "default_code_start": 4096,
    "default_data_start": 8192,
    "default_stack_start": 12288,
    "memory_layout": {
      "interrupt_vectors": {"start": 0, "end": 1023},
      "code_section": {"start": 4096, "end": 8191},
      "data_section": {"start": 8192, "end": 12287},
      "stack_section": {"start": 12288, "end": 16383},
      "mmio": {"start": 16384, "end": 65535}
    }
  },
  "pc_behavior": {
    "points_to": "next_instruction",
    "offset_for_jumps": 0,
    "jump_offset_calculation": "target_minus_pc",
    "disassembly": {
      "jump_target_calculation": "pc_plus_offset",
      "pc_value_for_jumps": "instruction_address_plus_pc_offset"
    }
  },
  "instruction_architecture": {
    "instruction_size": 16,
    "instruction_size_bytes": 2,
    "variable_length": false,
    "alignment": 2,
    "max_instruction_length": 16,
    "address_bits": 16,
    "address_mask": "0xFFFF",
    "pc_increment": 2,
    "immediate_widths": {
      "i_type": 8,
      "branch": 4,
      "jump": 12,
      "load_store": 4
    },
    "shift_config": {
      "type_width": 2,
      "amount_width": 4
    },
    "register_count": 16,
    "register_bits": 4
  },
  "register_formatting": {
    "prefix": "R",
    "suffix": "",
    "case": "upper",
    "zero_register": "R0",
    "alternatives": {
      "R0": ["ZERO"],
      "R1": ["AT"],
      "R2": ["V0"],
      "R3": ["V1"],
      "R4": ["A0"],
      "R5": ["A1"],
      "R6": ["A2"],
      "R7": ["A3"],
      "R8": ["T0"],
      "R9": ["T1"],
      "R10": ["T2"],
      "R11": ["T3"],
      "R12": ["T4"],
      "R13": ["T5"],
      "R14": ["S0"],
      "R15": ["S1"]
    }
  },
  "operand_formatting": {
    "immediate_prefix": "#",
    "hex_prefix": "0x",
    "binary_prefix": "0b",
    "register_prefix": "R",
    "address_format": "0x{addr:X}",
    "immediate_format": "{value}",
    "register_format": "R{reg}",
    "separators": {
      "operand": ", ",
      "address": "(",
      "address_close": ")"
    },
    "disassembly": {
      "immediate_format": "decimal",
      "hex_threshold": 255,
      "negative_hex_threshold": -255,
      "always_decimal_for": ["LDI", "ADDI", "SLTI", "SLTUI", "SLLI", "SRLI", "SRAI", "ORI", "ANDI", "XORI"],
      "always_hex_for": ["LUI", "JMP", "JAL", "BEQ", "BNE", "BLT", "BGE", "BLTU", "BGEU", "BZ", "BNZ"]
    }
  },
  "instruction_categories": {
    "control_flow": {
      "jumps": ["JMP", "JAL", "JALR", "JR"],
      "branches": ["BEQ", "BNE", "BLT", "BGE", "BZ", "BNZ"],
      "calls": ["CALL", "ECALL"],
      "returns": ["RET", "JR"]
    },
    "data_movement": ["LD", "ST", "LDI", "MOVE", "LUI", "AUIPC"],
    "arithmetic": ["ADD", "SUB", "SLT", "SLTU", "INC", "DEC"],
    "logical": ["AND", "OR", "XOR", "NOT", "NEG", "SLL", "SRL", "SRA"],
    "stack": ["PUSH", "POP"]
  },
  "pseudo_instruction_fallbacks": {
    "hide_operands_by_default": false,
    "default_behavior": "show_operands",
    "fallback_rules": {
      "NOP": "hide_operands",
      "RET": "hide_operands",
      "INC": "hide_operands",
      "DEC": "hide_operands",
      "NOT": "hide_operands",
      "NEG": "hide_operands"
    }
  },
  "data_detection": {
    "string_encodings": ["ascii", "utf8"],
    "ascii_threshold": 0.8,
    "min_string_length": 3,
    "max_string_length": 100,
    "detect_zeros": true,
    "detect_patterns": ["repeating", "incrementing", "decrementing"]
  },
  "symbol_resolution": {
    "case_sensitive": false,
    "scope_rules": {
      "local": ".",
      "global": "",
      "external": "_"
    },
    "naming_conventions": {
      "functions": "func_{name}",
      "variables": "var_{name}",
      "constants": "CONST_{name}"
    },
    "precedence": ["local", "global", "external"]
  },
  "error_messages": {
    "unknown_instruction": "Unknown instruction '{instruction}' at line {line}",
    "invalid_operand": "Invalid operand '{operand}' for instruction '{instruction}'",
    "undefined_symbol": "Undefined symbol '{symbol}' referenced at line {line}",
    "invalid_address": "Invalid address {address} for {context}",
    "format": {
      "locale": "en_US",
      "date_format": "YYYY-MM-DD",
      "time_format": "HH:MM:SS"
    }
  },
  "constants": {
    "word_mask": {"value": 65535, "description": "16-bit word mask (0xFFFF)"},
    "sign_bit_mask": {"value": 32768, "description": "16-bit sign bit mask (0x8000)"},
    "max_signed_value": {"value": 32767, "description": "Maximum 16-bit signed value (0x7FFF)"},
    "min_signed_value": {"value": -32768, "description": "Minimum 16-bit signed value (-0x8000)"},
    "address_mask": {"value": 65535, "description": "16-bit address mask (0xFFFF)"},
    "register_count": {"value": 16, "description": "Number of registers (R0-R15)"},
    "immediate_sign_bit_8": {"value": 128, "description": "8-bit immediate sign bit (0x80)"},
    "immediate_sign_extend_8": {"value": 65280, "description": "8-bit immediate sign extension (0xFF00)"},
    "branch_sign_extend_4": {"value": 65520, "description": "4-bit branch sign extension (0xFFF0)"},
    "shift_amount_mask": {"value": 15, "description": "4-bit shift amount mask (0xF)"}
  },
  "registers": {
    "general_purpose": [
      {"name": "R0", "size": 16, "alias": ["ZERO"], "description": "Always zero"},
      {"name": "R1", "size": 16, "alias": ["AT"], "description": "Assembler temporary"},
      {"name": "R2", "size": 16, "alias": ["V0"], "description": "Return value"},
      {"name": "R3", "size": 16, "alias": ["V1"], "description": "Return value"},
      {"name": "R4", "size": 16, "alias": ["A0"], "description": "Argument"},
      {"name": "R5", "size": 16, "alias": ["A1"], "description": "Argument"},
      {"name": "R6", "size": 16, "alias": ["A2"], "description": "Argument"},
      {"name": "R7", "size": 16, "alias": ["A3"], "description": "Argument"},
      {"name": "R8", "size": 16, "alias": ["T0"], "description": "Temporary"},
      {"name": "R9", "size": 16, "alias": ["T1"], "description": "Temporary"},
      {"name": "R10", "size": 16, "alias": ["T2"], "description": "Temporary"},
      {"name": "R11", "size": 16, "alias": ["T3"], "description": "Temporary"},
      {"name": "R12", "size": 16, "alias": ["T4"], "description": "Temporary"},
      {"name": "R13", "size": 16, "alias": ["T5"], "description": "Temporary"},
      {"name": "R14", "size": 16, "alias": ["S0"], "description": "Saved register"},
      {"name": "R15", "size": 16, "alias": ["S1"], "description": "Saved register"}
    ],
    "special_purpose": [
      {"name": "PC", "size": 16, "description": "Program Counter"},
      {"name": "SP", "size": 16, "description": "Stack Pointer"},
      {"name": "FLAGS", "size": 16, "description": "Status Flags"}
    ]
  },
  "instructions": [
    {
      "mnemonic": "NOP",
      "opcode": "0000",
      "format": "R-type",
      "description": "No operation",
      "encoding": {
        "fields": [
          {"name": "opcode", "bits": "15:12", "value": "0000"},
          {"name": "unused", "bits": "11:0", "value": "000000000000"}
        ]
      },
      "syntax": "NOP",
      "semantics": "No operation",
      "implementation": "# No operation implementation\n# Do nothing",
      "flags_affected": []
    },
    {
      "mnemonic": "ADD",
      "opcode": "0001",
      "format": "R-type",
      "description": "Add two registers",
      "encoding": {
        "fields": [
          {"name": "opcode", "bits": "15:12", "value": "0001"},
          {"name": "rd", "bits": "11:8", "type": "register"},
          {"name": "rs1", "bits": "7:4", "type": "register"},
          {"name": "rs2", "bits": "3:0", "type": "register"}
        ]
      },
      "syntax": "ADD $rd, $rs1, $rs2",
      "semantics": "$rd = $rs1 + $rs2",
      "implementation": "# Add instruction implementation\nrs1_val = read_register(operands['rs1'])\nrs2_val = read_register(operands['rs2'])\nresult = (rs1_val + rs2_val) & 0xFFFF\nwrite_register(operands['rd'], result)\n# Set flags\nset_flag('Z', result == 0)\nset_flag('N', (result & 0x8000) != 0)\nset_flag('C', (rs1_val + rs2_val) > 0xFFFF)\nset_flag('V', ((rs1_val & 0x8000) == (rs2_val & 0x8000)) and ((result & 0x8000) != (rs1_val & 0x8000)))",
      "flags_affected": ["Z", "N", "C", "V"]
    },
    {

      "mnemonic": "SUB",
      "opcode": "0010",
      "format": "R-type",
      "description": "Subtract two registers",
      "encoding": {
        "fields": [
          {"name": "opcode", "bits": "15:12", "value": "0010"},
          {"name": "rd", "bits": "11:8", "type": "register"},
          {"name": "rs1", "bits": "7:4", "type": "register"},
          {"name": "rs2", "bits": "3:0", "type": "register"}
        ]
      },
      "syntax": "SUB $rd, $rs1, $rs2",
      "semantics": "$rd = $rs1 - $rs2",
      "implementation": "# Subtract instruction implementation\nrs1_val = read_register(operands['rs1'])\nrs2_val = read_register(operands['rs2'])\nresult = (rs1_val - rs2_val) & 0xFFFF\nwrite_register(operands['rd'], result)\n# Set flags\nset_flag('Z', result == 0)\nset_flag('N', (result & 0x8000) != 0)\nset_flag('C', rs1_val >= rs2_val)\nset_flag('V', ((rs1_val & 0x8000) != (rs2_val & 0x8000)) and ((result & 0x8000) == (rs2_val & 0x8000)))",
      "flags_affected": ["Z", "N", "C", "V"]
    },
    {
      "mnemonic": "AND",
      "opcode": "0011",
      "format": "R-type",
      "description": "Bitwise AND",
      "encoding": {
        "fields": [
          {"name": "opcode", "bits": "15:12", "value": "0011"},
          {"name": "rd", "bits": "11:8", "type": "register"},
          {"name": "rs1", "bits": "7:4", "type": "register"},
          {"name": "rs2", "bits": "3:0", "type": "register"}
        ]
      },
      "syntax": "AND $rd, $rs1, $rs2",
      "semantics": "$rd = $rs1 & $rs2",
      "implementation": "# Bitwise AND implementation\nrs1_val = read_register(operands['rs1'])\nrs2_val = read_register(operands['rs2'])\nresult = (rs1_val & rs2_val) & 0xFFFF\nwrite_register(operands['rd'], result)\n# Set flags\nset_flag('Z', result == 0)\nset_flag('N', (result & 0x8000) != 0)",
      "flags_affected": ["Z", "N"]
    },
    {
      "mnemonic": "OR",
      "opcode": "0100",
      "format": "R-type",
      "description": "Bitwise OR",
      "encoding": {
        "fields": [
          {"name": "opcode", "bits": "15:12", "value": "0100"},
          {"name": "rd", "bits": "11:8", "type": "register"},
          {"name": "rs1", "bits": "7:4", "type": "register"},
          {"name": "rs2", "bits": "3:0", "type": "register"}
        ]
      },
      "syntax": "OR $rd, $rs1, $rs2",
      "semantics": "$rd = $rs1 | $rs2",
      "implementation": "# Bitwise OR implementation\nrs1_val = read_register(operands['rs1'])\nrs2_val = read_register(operands['rs2'])\nresult = (rs1_val | rs2_val) & 0xFFFF\nwrite_register(operands['rd'], result)\n# Set flags\nset_flag('Z', result == 0)\nset_flag('N', (result & 0x8000) != 0)",
      "flags_affected": ["Z", "N"]
    },
    {
      "mnemonic": "LDI",
      "opcode": "0101",
      "format": "I-type",
      "description": "Load immediate value",
      "encoding": {
        "fields": [
          {"name": "opcode", "bits": "15:12", "value": "0101"},
          {"name": "rd", "bits": "11:8", "type": "register"},
          {"name": "immediate", "bits": "7:0", "type": "immediate", "signed": false}
        ]
      },
      "syntax": "LDI $rd, #imm",
      "semantics": "$rd = imm",
      "implementation": "# Load immediate implementation\nimm_val = operands['immediate']\nresult = imm_val & 0xFF\nwrite_register(operands['rd'], result)\n# Set flags\nset_flag('Z', result == 0)\nset_flag('N', (result & 0x8000) != 0)",
      "flags_affected": ["Z", "N"]
    },
    {
      "mnemonic": "LD",
      "opcode": "0110",
      "format": "I-type",
      "description": "Load from memory",
      "encoding": {
        "fields": [
          {"name": "opcode", "bits": "15:12", "value": "0110"},
          {"name": "rd", "bits": "11:8", "type": "register"},
          {"name": "rs1", "bits": "7:4", "type": "register"},
          {"name": "offset", "bits": "3:0", "type": "immediate", "signed": true}
        ]
      },
      "syntax": "LD $rd, offset($rs1)",
      "semantics": "$rd = Memory[$rs1 + offset]",
      "implementation": "# Load from memory implementation\nrs1_val = read_register(operands['rs1'])\noffset = operands['offset']\n# Sign extend 4-bit offset\nif offset & 0x8:\n    offset = offset | 0xFFF0\naddr = (rs1_val + offset) & 0xFFFF\n# Load 16-bit word (little endian)\nif addr + 1 < len(memory):\n    result = memory[addr] | (memory[addr + 1] << 8)\n    write_register(operands['rd'], result)\n    # Set flags\n    set_flag('Z', result == 0)\n    set_flag('N', (result & 0x8000) != 0)",
      "flags_affected": ["Z", "N"]
    },
    {
      "mnemonic": "ST",
      "opcode": "0111",
      "format": "I-type",
      "description": "Store to memory",
      "encoding": {
        "fields": [
          {"name": "opcode", "bits": "15:12", "value": "0111"},
          {"name": "rs1", "bits": "11:8", "type": "register"},
          {"name": "rs2", "bits": "7:4", "type": "register"},
          {"name": "offset", "bits": "3:0", "type": "immediate", "signed": true}
        ]
      },
      "syntax": "ST $rs2, offset($rs1)",
      "semantics": "Memory[$rs1 + offset] = $rs2",
      "implementation": "# Store to memory implementation\nrs1_val = read_register(operands['rs1'])\nrs2_val = read_register(operands['rs2'])\noffset = operands['offset']\n# Sign extend 4-bit offset\nif offset & 0x8:\n    offset = offset | 0xFFF0\naddr = (rs1_val + offset) & 0xFFFF\n# Store 16-bit word (little endian)\nif addr + 1 < len(memory):\n    memory[addr] = rs2_val & 0xFF\n    memory[addr + 1] = (rs2_val >> 8) & 0xFF",
      "flags_affected": []
    },
    {
      "mnemonic": "JMP",
      "opcode": "1000",
      "format": "J-type",
      "description": "Unconditional jump",
      "encoding": {
        "fields": [
          {"name": "opcode", "bits": "15:12", "value": "1000"},
          {"name": "address", "bits": "11:0", "type": "address"}
        ]
      },
      "syntax": "JMP address",
      "semantics": "PC = address",
      "implementation": "# Unconditional jump implementation\naddr = operands['address']\ncontext.pc = addr & 0xFFFF",
      "flags_affected": []
    },
    {
      "mnemonic": "JZ",
      "opcode": "1001",
      "format": "J-type",
      "description": "Jump if zero",
      "encoding": {
        "fields": [
          {"name": "opcode", "bits": "15:12", "value": "1001"},
          {"name": "address", "bits": "11:0", "type": "address"}
        ]
      },
      "syntax": "JZ address",
      "semantics": "if (Z) PC = address",
      "implementation": "# Jump if zero implementation\naddr = operands['address']\nif get_flag('Z'):\n    context.pc = addr & 0xFFFF",
      "flags_affected": []
    },
    {
      "mnemonic": "JNZ",
      "opcode": "1010",
      "format": "J-type",
      "description": "Jump if not zero",
      "encoding": {
        "fields": [
          {"name": "opcode", "bits": "15:12", "value": "1010"},
          {"name": "address", "bits": "11:0", "type": "address"}
        ]
      },
      "syntax": "JNZ address",
      "semantics": "if (!Z) PC = address",
      "implementation": "# Jump if not zero implementation\naddr = operands['address']\nif not get_flag('Z'):\n    context.pc = addr & 0xFFFF",
      "flags_affected": []
    },
    {
      "mnemonic": "CALL",
      "opcode": "1011",
      "format": "J-type",
      "description": "Call subroutine",
      "encoding": {
        "fields": [
          {"name": "opcode", "bits": "15:12", "value": "1011"},
          {"name": "address", "bits": "11:0", "type": "address"}
        ]
      },
      "syntax": "CALL address",
      "semantics": "SP = SP - 2; Memory[SP] = PC; PC = address",
      "implementation": "# Call subroutine implementation\naddr = operands['address']\nsp_val = read_register('SP')\n# Push return address\nsp_val = (sp_val - 2) & 0xFFFF\nif sp_val + 1 < len(memory):\n    memory[sp_val] = context.pc & 0xFF\n    memory[sp_val + 1] = (context.pc >> 8) & 0xFF\nwrite_register('SP', sp_val)\n# Jump to address\ncontext.pc = addr & 0xFFFF",
      "flags_affected": []
    },
    {
      "mnemonic": "RET",
      "opcode": "1100",
      "format": "R-type",
      "description": "Return from subroutine",
      "encoding": {
        "fields": [
          {"name": "opcode", "bits": "15:12", "value": "1100"},
          {"name": "unused", "bits": "11:0", "value": "000000000000"}
        ]
      },
      "syntax": "RET",
      "semantics": "PC = Memory[SP]; SP = SP + 2",
      "implementation": "# Return from subroutine implementation\nsp_val = read_register('SP')\n# Pop return address\nif sp_val + 1 < len(memory):\n    return_addr = memory[sp_val] | (memory[sp_val + 1] << 8)\n    context.pc = return_addr & 0xFFFF\nsp_val = (sp_val + 2) & 0xFFFF\nwrite_register('SP', sp_val)",
      "flags_affected": []
    }
  ],
  "addressing_modes": [
    {
      "name": "register_direct",
      "syntax": "$reg",
      "description": "Direct register access"
    },
    {
      "name": "immediate",
      "syntax": "#value",
      "description": "Immediate value"
    },
    {
      "name": "register_indirect",
      "syntax": "($reg)",
      "description": "Memory address in register"
    },
    {
      "name": "indexed",
      "syntax": "offset($reg)",
      "description": "Register plus offset"
    }
  ],
  "directives": [
    {
      "name": ".org",
      "description": "Set origin address",
      "action": "set_origin",
      "implementation": "# Set origin directive implementation\nif args:\n    addr = int(args[0], 0)  # Parse as hex/decimal\n    context.current_address = addr\n    assembler.context.current_address = addr\n    assembler.symbol_table.set_current_address(addr)",
      "argument_types": ["number"]
    },
    {
      "name": ".word",
      "description": "Define word data",
      "action": "allocate_bytes",
      "implementation": "# Define word directive implementation\nresult = bytearray()\nfor arg in args:\n    value = int(arg, 0)  # Parse as hex/decimal\n    # Little endian 16-bit word\n    result.extend([value & 0xFF, (value >> 8) & 0xFF])\n    context.current_address += 2\nassembler.context.current_address = context.current_address\nassembler.symbol_table.set_current_address(context.current_address)",
      "argument_types": ["number"]
    },
    {
      "name": ".byte",
      "description": "Define byte data",
      "action": "allocate_bytes",
      "implementation": "# Define byte directive implementation\nresult = bytearray()\nfor arg in args:\n    value = int(arg, 0)  # Parse as hex/decimal\n    result.append(value & 0xFF)\n    context.current_address += 1\nassembler.context.current_address = context.current_address\nassembler.symbol_table.set_current_address(context.current_address)",
      "argument_types": ["number"]
    },
    {
      "name": ".space",
      "description": "Reserve space",
      "action": "allocate_space",
      "implementation": "# Reserve space directive implementation\nif args:\n    size = int(args[0])\n    result = bytearray([0] * size)\n    context.current_address += size\n    assembler.context.current_address = context.current_address\n    assembler.symbol_table.set_current_address(context.current_address)",
      "argument_types": ["number"]
    },
    {
      "name": ".ascii",
      "description": "Define ASCII string",
      "action": "allocate_string",
      "implementation": "# Define ASCII string directive implementation\nif args:\n    string = args[0].strip('\"\\'')\n    result = bytearray(string.encode('ascii'))\n    context.current_address += len(result)\n    assembler.context.current_address = context.current_address\n    assembler.symbol_table.set_current_address(context.current_address)",
      "argument_types": ["string"]
    },
    {
      "name": ".asciiz",
      "description": "Define null-terminated ASCII string",
      "action": "allocate_string",
      "implementation": "# Define null-terminated ASCII string directive implementation\nif args:\n    string = args[0].strip('\"\\'')\n    result = bytearray(string.encode('ascii') + b'\\x00')\n    context.current_address += len(result)\n    assembler.context.current_address = context.current_address\n    assembler.symbol_table.set_current_address(context.current_address)",
      "argument_types": ["string"]
    }
  ],
  "assembly_syntax": {
    "comment_char": ";",
    "label_suffix": ":",
    "register_prefix": "$",
    "immediate_prefix": "#",
    "hex_prefix": "0x",
    "binary_prefix": "0b",
    "case_sensitive": false,
    "directives": [
      ".org",
      ".word",
      ".byte",
      ".space",
      ".ascii",
      ".asciiz"
    ]
  }
} 