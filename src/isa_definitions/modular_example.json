{
  "name": "ModularExample",
  "version": "1.0",
  "description": "Example ISA demonstrating modular capabilities",
  "instruction_size": 32,
  "word_size": 32,
  "endianness": "little",
  "address_space": {
    "size": 16777216,
    "default_code_start": 4096,
    "default_data_start": 8192,
    "default_stack_start": 32768,
    "memory_layout": {
      "interrupt_vectors": {"start": 0, "end": 1023},
      "code_section": {"start": 4096, "end": 8191},
      "data_section": {"start": 8192, "end": 32767},
      "stack_section": {"start": 32768, "end": 65535},
      "mmio": {"start": 65536, "end": 16777215}
    },
    "alignment_requirements": {
      "code": 4,
      "data": 4,
      "stack": 8
    }
  },
  "pc_behavior": {
    "points_to": "next_instruction",
    "offset_for_jumps": 0,
    "jump_offset_calculation": "target_minus_pc",
    "disassembly": {
      "jump_target_calculation": "pc_plus_offset",
      "pc_value_for_jumps": "instruction_address_plus_pc_offset"
    }
  },
  "instruction_architecture": {
    "instruction_size": 32,
    "instruction_size_bytes": 4,
    "variable_length": false,
    "alignment": 4,
    "max_instruction_length": 32,
    "address_bits": 24,
    "address_mask": "0xFFFFFF",
    "pc_increment": 4,
    "immediate_widths": {
      "i_type": 16,
      "branch": 16,
      "jump": 26,
      "load_store": 16
    },
    "shift_config": {
      "type_width": 3,
      "amount_width": 5
    },
    "register_count": 16,
    "register_bits": 4
  },
  "register_formatting": {
    "prefix": "R",
    "suffix": "",
    "case": "upper",
    "zero_register": "R0",
    "alternatives": {
      "R0": ["ZERO"],
      "R1": ["AT"],
      "R2": ["V0"],
      "R3": ["V1"],
      "R4": ["A0"],
      "R5": ["A1"],
      "R6": ["A2"],
      "R7": ["A3"],
      "R8": ["T0"],
      "R9": ["T1"],
      "R10": ["T2"],
      "R11": ["T3"],
      "R12": ["T4"],
      "R13": ["T5"],
      "R14": ["S0"],
      "R15": ["S1"]
    }
  },
  "operand_formatting": {
    "immediate_prefix": "#",
    "hex_prefix": "0x",
    "binary_prefix": "0b",
    "register_prefix": "R",
    "address_format": "0x{addr:X}",
    "immediate_format": "{value}",
    "register_format": "R{reg}",
    "separators": {
      "operand": ", ",
      "address": "(",
      "address_close": ")"
    },
    "disassembly": {
      "immediate_format": "decimal",
      "hex_threshold": 255,
      "negative_hex_threshold": -255,
      "always_decimal_for": ["ADDI", "SLTI", "SLTUI", "SLLI", "SRLI", "SRAI", "ORI", "ANDI", "XORI", "LOADI"],
      "always_hex_for": ["LUI", "JMP", "JAL", "BEQ", "BNE", "BLT", "BGE", "BLTU", "BGEU", "BZ", "BNZ"]
    }
  },
  "instruction_categories": {
    "control_flow": {
      "jumps": ["JMP", "JAL", "JALR", "JR"],
      "branches": ["BEQ", "BNE", "BLT", "BGE", "BZ", "BNZ"],
      "calls": ["CALL", "ECALL"],
      "returns": ["RET", "JR"]
    },
    "data_movement": ["LOAD", "STORE", "LOADI", "MOVE", "LUI", "AUIPC"],
    "arithmetic": ["ADD", "SUB", "SLT", "SLTU", "INC", "DEC"],
    "logical": ["AND", "OR", "XOR", "NOT", "NEG", "SLL", "SRL", "SRA"],
    "stack": ["PUSH", "POP"]
  },
  "pseudo_instruction_fallbacks": {
    "hide_operands_by_default": false,
    "default_behavior": "show_operands",
    "fallback_rules": {
      "NOP": "hide_operands",
      "RET": "hide_operands",
      "INC": "hide_operands",
      "DEC": "hide_operands",
      "NOT": "hide_operands",
      "NEG": "hide_operands"
    }
  },
  "data_detection": {
    "string_encodings": ["ascii", "utf8"],
    "ascii_threshold": 0.8,
    "min_string_length": 3,
    "max_string_length": 100,
    "detect_zeros": true,
    "detect_patterns": ["repeating", "incrementing", "decrementing"]
  },
  "symbol_resolution": {
    "case_sensitive": false,
    "scope_rules": {
      "local": ".",
      "global": "",
      "external": "_"
    },
    "naming_conventions": {
      "functions": "func_{name}",
      "variables": "var_{name}",
      "constants": "CONST_{name}"
    },
    "precedence": ["local", "global", "external"]
  },
  "error_messages": {
    "unknown_instruction": "Unknown instruction '{instruction}' at line {line}",
    "invalid_operand": "Invalid operand '{operand}' for instruction '{instruction}'",
    "undefined_symbol": "Undefined symbol '{symbol}' referenced at line {line}",
    "invalid_address": "Invalid address {address} for {context}",
    "format": {
      "locale": "en_US",
      "date_format": "YYYY-MM-DD",
      "time_format": "HH:MM:SS"
    }
  },
  "constants": {
    "word_mask": {"value": 4294967295, "description": "32-bit word mask (0xFFFFFFFF)"},
    "sign_bit_mask": {"value": 2147483648, "description": "32-bit sign bit mask (0x80000000)"},
    "max_signed_value": {"value": 2147483647, "description": "Maximum 32-bit signed value (0x7FFFFFFF)"},
    "min_signed_value": {"value": -2147483648, "description": "Minimum 32-bit signed value (-0x80000000)"},
    "address_mask": {"value": 16777215, "description": "24-bit address mask (0xFFFFFF)"},
    "register_count": {"value": 16, "description": "Number of registers (R0-R15)"},
    "immediate_sign_bit_16": {"value": 32768, "description": "16-bit immediate sign bit (0x8000)"},
    "immediate_sign_extend_16": {"value": 4294901760, "description": "16-bit immediate sign extension (0xFFFF0000)"},
    "branch_sign_extend_16": {"value": 4294901760, "description": "16-bit branch sign extension (0xFFFF0000)"},
    "shift_amount_mask": {"value": 31, "description": "5-bit shift amount mask (0x1F)"}
  },
  "registers": {
    "general_purpose": [
      {"name": "R0", "size": 32, "alias": ["ZERO"], "description": "Always zero"},
      {"name": "R1", "size": 32, "alias": ["AT"], "description": "Assembler temporary"},
      {"name": "R2", "size": 32, "alias": ["V0"], "description": "Return value"},
      {"name": "R3", "size": 32, "alias": ["V1"], "description": "Return value"},
      {"name": "R4", "size": 32, "alias": ["A0"], "description": "Argument"},
      {"name": "R5", "size": 32, "alias": ["A1"], "description": "Argument"},
      {"name": "R6", "size": 32, "alias": ["A2"], "description": "Argument"},
      {"name": "R7", "size": 32, "alias": ["A3"], "description": "Argument"},
      {"name": "R8", "size": 32, "alias": ["T0"], "description": "Temporary"},
      {"name": "R9", "size": 32, "alias": ["T1"], "description": "Temporary"},
      {"name": "R10", "size": 32, "alias": ["T2"], "description": "Temporary"},
      {"name": "R11", "size": 32, "alias": ["T3"], "description": "Temporary"},
      {"name": "R12", "size": 32, "alias": ["T4"], "description": "Temporary"},
      {"name": "R13", "size": 32, "alias": ["T5"], "description": "Temporary"},
      {"name": "R14", "size": 32, "alias": ["S0"], "description": "Saved register"},
      {"name": "R15", "size": 32, "alias": ["S1"], "description": "Saved register"}
    ],
    "special_purpose": [
      {"name": "PC", "size": 32, "description": "Program Counter"},
      {"name": "SP", "size": 32, "description": "Stack Pointer"},
      {"name": "FLAGS", "size": 32, "description": "Status Flags"}
    ]
  },
  "assembly_syntax": {
    "comment_char": "#",
    "comment_chars": ["#", "//"],
    "label_suffix": ":",
    "register_prefix": "R",
    "immediate_prefix": "#",
    "hex_prefix": "0x",
    "binary_prefix": "0b",
    "case_sensitive": false,
    "operand_separators": [",", " "],
    "whitespace_handling": "flexible",
    "directives": [".org", ".word", ".byte", ".space", ".ascii", ".asciiz", ".section", ".global", ".equ", ".align", ".custom"]
  },
  "operand_patterns": {
    "register": {
      "name": "register",
      "type": "register",
      "pattern": "^R([0-9]+)$",
      "description": "Register operand (R0-R15)",
      "examples": ["R0", "R1", "R15"],
      "validation_rules": {
        "min_value": 0,
        "max_value": 15
      }
    },
    "immediate": {
      "name": "immediate",
      "type": "immediate",
      "pattern": "^#([+-]?(?:0x[0-9a-fA-F]+|0b[01]+|\\d+))$",
      "description": "Immediate value with prefix",
      "examples": ["#42", "#0x1A", "#0b1010", "#-10"],
      "validation_rules": {
        "signed": true,
        "bit_width": 16
      }
    },
    "address": {
      "name": "address",
      "type": "address",
      "pattern": "^@([0-9a-fA-F]+)$",
      "description": "Address reference with @ prefix",
      "examples": ["@1000", "@0x2000"],
      "validation_rules": {
        "signed": false,
        "bit_width": 24
      }
    },
    "label": {
      "name": "label",
      "type": "label",
      "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$",
      "description": "Label reference",
      "examples": ["start", "loop", "main"],
      "validation_rules": {
        "max_length": 32
      }
    }
  },
  "instruction_formats": {
    "R-type": {
      "name": "R-type",
      "description": "Register-to-register operations",
      "operand_patterns": ["register", "register", "register"],
      "encoding_template": {
        "fields": [
          {"name": "opcode", "bits": "31:26", "type": "fixed"},
          {"name": "rs1", "bits": "25:21", "type": "register"},
          {"name": "rs2", "bits": "20:16", "type": "register"},
          {"name": "rd", "bits": "15:11", "type": "register"},
          {"name": "funct", "bits": "10:0", "type": "fixed"}
        ]
      },
      "examples": ["ADD R1, R2, R3", "SUB R4, R5, R6"]
    },
    "I-type": {
      "name": "I-type",
      "description": "Immediate operations",
      "operand_patterns": ["register", "register", "immediate"],
      "encoding_template": {
        "fields": [
          {"name": "opcode", "bits": "31:26", "type": "fixed"},
          {"name": "rs1", "bits": "25:21", "type": "register"},
          {"name": "rd", "bits": "20:16", "type": "register"},
          {"name": "immediate", "bits": "15:0", "type": "immediate"}
        ]
      },
      "examples": ["ADDI R1, R2, #42", "LOADI R3, #0x1000"]
    },
    "J-type": {
      "name": "J-type",
      "description": "Jump instructions",
      "operand_patterns": ["address"],
      "encoding_template": {
        "fields": [
          {"name": "opcode", "bits": "31:26", "type": "fixed"},
          {"name": "address", "bits": "25:0", "type": "address"}
        ]
      },
      "examples": ["JMP @1000", "CALL @main"]
    }
  },
  "directives": [
    {
      "name": ".custom",
      "description": "Custom directive for this ISA",
      "action": "Define custom behavior",
      "implementation": "# Custom directive implementation\nif len(args) >= 2:\n    name = args[0]\n    value = int(args[1], 0)\n    # Store custom value in symbol table\n    assembler.symbol_table.define_symbol(name, value)\n    result = bytearray()\n    context.current_address += len(result)\n    assembler.context.current_address = context.current_address\n    assembler.symbol_table.set_current_address(context.current_address)",
      "argument_types": ["string", "number"],
      "handler": "custom",
      "syntax": ".custom name value",
      "examples": [".custom magic 0xDEADBEEF"],
      "validation_rules": {
        "name_pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$",
        "value_range": [0, 4294967295]
      }
    }
  ],
  "instructions": [
    {
      "mnemonic": "NOP",
      "opcode": "000000",
      "format": "R-type",
      "description": "No operation",
      "encoding": {
        "fields": [
          {"name": "opcode", "bits": "31:26", "value": "000000"},
          {"name": "unused", "bits": "25:0", "value": "00000000000000000000000000"}
        ]
      },
      "syntax": "NOP",
      "semantics": "No operation",
      "implementation": "# No operation implementation\n# Do nothing",
      "flags_affected": []
    },
    {
      "mnemonic": "ADD",
      "opcode": "000001",
      "format": "R-type",
      "description": "Add two registers",
      "encoding": {
        "fields": [
          {"name": "opcode", "bits": "31:26", "value": "000001"},
          {"name": "rs1", "bits": "25:21", "type": "register"},
          {"name": "rs2", "bits": "20:16", "type": "register"},
          {"name": "rd", "bits": "15:11", "type": "register"},
          {"name": "funct", "bits": "10:0", "value": "00000000000"}
        ]
      },
      "syntax": "ADD $rd, $rs1, $rs2",
      "semantics": "$rd = $rs1 + $rs2",
      "implementation": "# Add instruction implementation\nrs1_val = read_register(operands['rs1'])\nrs2_val = read_register(operands['rs2'])\nresult = (rs1_val + rs2_val) & 0xFFFFFFFF\nwrite_register(operands['rd'], result)\n# Set flags\nset_flag('Z', result == 0)\nset_flag('N', (result & 0x80000000) != 0)\nset_flag('C', (rs1_val + rs2_val) > 0xFFFFFFFF)\nset_flag('V', ((rs1_val & 0x80000000) == (rs2_val & 0x80000000)) and ((result & 0x80000000) != (rs1_val & 0x80000000)))",
      "flags_affected": ["Z", "N", "C", "V"]
    },
    {
      "mnemonic": "ADDI",
      "opcode": "000010",
      "format": "I-type",
      "description": "Add immediate",
      "encoding": {
        "fields": [
          {"name": "opcode", "bits": "31:26", "value": "000010"},
          {"name": "rs1", "bits": "25:21", "type": "register"},
          {"name": "rd", "bits": "20:16", "type": "register"},
          {"name": "immediate", "bits": "15:0", "type": "immediate", "signed": true}
        ]
      },
      "syntax": "ADDI $rd, $rs1, #imm",
      "semantics": "$rd = $rs1 + imm",
      "implementation": "# Add immediate implementation\nrs1_val = read_register(operands['rs1'])\nimm_val = operands['immediate']\n# Sign extend 16-bit immediate\nif imm_val & 0x8000:\n    imm_val = imm_val | 0xFFFF0000\nresult = (rs1_val + imm_val) & 0xFFFFFFFF\nwrite_register(operands['rd'], result)\n# Set flags\nset_flag('Z', result == 0)\nset_flag('N', (result & 0x80000000) != 0)",
      "flags_affected": ["Z", "N", "C", "V"]
    },
    {
      "mnemonic": "JMP",
      "opcode": "000011",
      "format": "J-type",
      "description": "Unconditional jump",
      "encoding": {
        "fields": [
          {"name": "opcode", "bits": "31:26", "value": "000011"},
          {"name": "address", "bits": "25:0", "type": "address"}
        ]
      },
      "syntax": "JMP @address",
      "semantics": "PC = address",
      "implementation": "# Unconditional jump implementation\naddr = operands['address']\ncontext.pc = addr & 0xFFFFFFFF",
      "flags_affected": []
    },
    {
      "mnemonic": "LOAD",
      "opcode": "000100",
      "format": "I-type",
      "description": "Load from memory",
      "encoding": {
        "fields": [
          {"name": "opcode", "bits": "31:26", "value": "000100"},
          {"name": "rs1", "bits": "25:21", "type": "register"},
          {"name": "rd", "bits": "20:16", "type": "register"},
          {"name": "offset", "bits": "15:0", "type": "immediate", "signed": true}
        ]
      },
      "syntax": "LOAD $rd, offset($rs1)",
      "semantics": "$rd = Memory[$rs1 + offset]",
      "implementation": "# Load from memory implementation\nrs1_val = read_register(operands['rs1'])\noffset = operands['offset']\n# Sign extend 16-bit offset\nif offset & 0x8000:\n    offset = offset | 0xFFFF0000\naddr = (rs1_val + offset) & 0xFFFFFFFF\n# Load 32-bit word (little endian)\nif addr + 3 < len(memory):\n    result = memory[addr] | (memory[addr + 1] << 8) | (memory[addr + 2] << 16) | (memory[addr + 3] << 24)\n    write_register(operands['rd'], result)\n    # Set flags\n    set_flag('Z', result == 0)\n    set_flag('N', (result & 0x80000000) != 0)",
      "flags_affected": ["Z", "N"]
    },
    {
      "mnemonic": "STORE",
      "opcode": "000101",
      "format": "I-type",
      "description": "Store to memory",
      "encoding": {
        "fields": [
          {"name": "opcode", "bits": "31:26", "value": "000101"},
          {"name": "rs1", "bits": "25:21", "type": "register"},
          {"name": "rs2", "bits": "20:16", "type": "register"},
          {"name": "offset", "bits": "15:0", "type": "immediate", "signed": true}
        ]
      },
      "syntax": "STORE $rs2, offset($rs1)",
      "semantics": "Memory[$rs1 + offset] = $rs2",
      "implementation": "# Store to memory implementation\nrs1_val = read_register(operands['rs1'])\nrs2_val = read_register(operands['rs2'])\noffset = operands['offset']\n# Sign extend 16-bit offset\nif offset & 0x8000:\n    offset = offset | 0xFFFF0000\naddr = (rs1_val + offset) & 0xFFFFFFFF\n# Store 32-bit word (little endian)\nif addr + 3 < len(memory):\n    memory[addr] = rs2_val & 0xFF\n    memory[addr + 1] = (rs2_val >> 8) & 0xFF\n    memory[addr + 2] = (rs2_val >> 16) & 0xFF\n    memory[addr + 3] = (rs2_val >> 24) & 0xFF",
      "flags_affected": []
    }
  ],
  "pseudo_instructions": [
    {
      "mnemonic": "MOV",
      "description": "Move register",
      "syntax": "MOV $rd, $rs",
      "expansion": "ADD $rd, $rs, R0",
      "validation_rules": {
        "rd_not_zero": true
      }
    },
    {
      "mnemonic": "CLR",
      "description": "Clear register",
      "syntax": "CLR $rd",
      "expansion": "ADD $rd, R0, R0",
      "validation_rules": {
        "rd_not_zero": true
      }
    }
  ],
  "addressing_modes": [
    {
      "name": "register",
      "syntax": "R#",
      "description": "Register addressing",
      "pattern": "^R([0-9]+)$",
      "operand_types": ["register"]
    },
    {
      "name": "immediate",
      "syntax": "#value",
      "description": "Immediate addressing",
      "pattern": "^#([+-]?(?:0x[0-9a-fA-F]+|0b[01]+|\\d+))$",
      "operand_types": ["immediate"]
    },
    {
      "name": "base_offset",
      "syntax": "offset(base)",
      "description": "Base register with offset",
      "pattern": "^([+-]?(?:0x[0-9a-fA-F]+|0b[01]+|\\d+))\\(R([0-9]+)\\)$",
      "operand_types": ["immediate", "register"]
    }
  ],
  "validation_rules": {
    "instruction_alignment": 4,
    "data_alignment": 4,
    "max_immediate_value": 32767,
    "min_immediate_value": -32768,
    "max_address_value": 16777215,
    "register_count": 16
  }
} 