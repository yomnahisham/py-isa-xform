{
  "name": "CustomISA",
  "version": "1.0",
  "description": "Example ISA with custom instruction implementations",
  "instruction_size": 16,
  "word_size": 16,
  "endianness": "little",
  "address_space": {
    "size": 65536,
    "default_code_start": 32,
    "default_data_start": 8192,
    "default_stack_start": 16384,
    "memory_layout": {
      "interrupt_vectors": {"start": 0, "end": 31},
      "code_section": {"start": 32, "end": 8191},
      "data_section": {"start": 8192, "end": 16383},
      "stack_section": {"start": 16384, "end": 65535},
      "mmio": {"start": 65536, "end": 65535}
    }
  },
  "pc_behavior": {
    "points_to": "next_instruction",
    "offset_for_jumps": 0,
    "jump_offset_calculation": "target_minus_pc",
    "disassembly": {
      "jump_target_calculation": "pc_plus_offset",
      "pc_value_for_jumps": "instruction_address_plus_pc_offset"
    }
  },
  "instruction_architecture": {
    "instruction_size": 16,
    "instruction_size_bytes": 2,
    "variable_length": false,
    "alignment": 2,
    "max_instruction_length": 16,
    "address_bits": 16,
    "address_mask": "0xFFFF",
    "pc_increment": 2,
    "immediate_widths": {
      "i_type": 6,
      "branch": 5,
      "jump": 10,
      "load_store": 4
    },
    "shift_config": {
      "type_width": 3,
      "amount_width": 4
    },
    "register_count": 8,
    "register_bits": 3
  },
  "register_formatting": {
    "prefix": "x",
    "suffix": "",
    "case": "lower",
    "zero_register": "x0",
    "alternatives": {
      "x0": ["zero"],
      "x1": ["ra"],
      "x2": ["sp"],
      "x3": ["s0"],
      "x4": ["s1"],
      "x5": ["t1"],
      "x6": ["a0"],
      "x7": ["a1"]
    }
  },
  "operand_formatting": {
    "immediate_prefix": "#",
    "hex_prefix": "0x",
    "binary_prefix": "0b",
    "register_prefix": "x",
    "address_format": "0x{addr:X}",
    "immediate_format": "{value}",
    "register_format": "x{reg}",
    "separators": {
      "operand": ", ",
      "address": "(",
      "address_close": ")"
    },
    "disassembly": {
      "immediate_format": "decimal",
      "hex_threshold": 255,
      "negative_hex_threshold": -255,
      "always_decimal_for": ["LI", "ADDI", "SLTI", "SLTUI", "SLLI", "SRLI", "SRAI", "ORI", "ANDI", "XORI"],
      "always_hex_for": ["LUI", "J", "JAL", "BEQ", "BNE", "BLT", "BGE", "BLTU", "BGEU", "BZ", "BNZ"]
    }
  },
  "instruction_categories": {
    "control_flow": {
      "jumps": ["J", "JAL", "JALR", "JR"],
      "branches": ["BEQ", "BNE", "BLT", "BGE", "BZ", "BNZ"],
      "calls": ["CALL", "ECALL"],
      "returns": ["RET", "JR"]
    },
    "data_movement": ["LW", "SW", "MOVE", "LI", "LUI", "AUIPC"],
    "arithmetic": ["ADD", "SUB", "MULT", "SLT", "SLTU", "INC", "DEC"],
    "logical": ["AND", "OR", "XOR", "NOT", "NEG", "SLL", "SRL", "SRA"],
    "custom": ["SWAP", "MEMCPY", "CRC16"],
    "stack": ["PUSH", "POP"]
  },
  "pseudo_instruction_fallbacks": {
    "hide_operands_by_default": false,
    "default_behavior": "show_operands",
    "fallback_rules": {
      "NOP": "hide_operands",
      "RET": "hide_operands",
      "INC": "hide_operands",
      "DEC": "hide_operands",
      "NOT": "hide_operands",
      "NEG": "hide_operands"
    }
  },
  "data_detection": {
    "string_encodings": ["ascii", "utf8"],
    "ascii_threshold": 0.8,
    "min_string_length": 3,
    "max_string_length": 100,
    "detect_zeros": true,
    "detect_patterns": ["repeating", "incrementing", "decrementing"]
  },
  "symbol_resolution": {
    "case_sensitive": false,
    "scope_rules": {
      "local": ".",
      "global": "",
      "external": "_"
    },
    "naming_conventions": {
      "functions": "func_{name}",
      "variables": "var_{name}",
      "constants": "CONST_{name}"
    },
    "precedence": ["local", "global", "external"]
  },
  "error_messages": {
    "unknown_instruction": "Unknown instruction '{instruction}' at line {line}",
    "invalid_operand": "Invalid operand '{operand}' for instruction '{instruction}'",
    "undefined_symbol": "Undefined symbol '{symbol}' referenced at line {line}",
    "invalid_address": "Invalid address {address} for {context}",
    "format": {
      "locale": "en_US",
      "date_format": "YYYY-MM-DD",
      "time_format": "HH:MM:SS"
    }
  },
  "constants": {
    "word_mask": {"value": 65535, "description": "16-bit word mask (0xFFFF)"},
    "sign_bit_mask": {"value": 32768, "description": "16-bit sign bit mask (0x8000)"},
    "max_signed_value": {"value": 32767, "description": "Maximum 16-bit signed value (0x7FFF)"},
    "min_signed_value": {"value": -32768, "description": "Minimum 16-bit signed value (-0x8000)"},
    "address_mask": {"value": 65535, "description": "16-bit address mask (0xFFFF)"},
    "register_count": {"value": 8, "description": "Number of registers (x0-x7)"},
    "immediate_sign_bit_6": {"value": 32, "description": "6-bit immediate sign bit (0x20)"},
    "immediate_sign_extend_6": {"value": 65504, "description": "6-bit immediate sign extension (0xFFE0)"},
    "branch_sign_extend_5": {"value": 65504, "description": "5-bit branch sign extension (0xFFE0)"},
    "shift_amount_mask": {"value": 15, "description": "4-bit shift amount mask (0xF)"}
  },
  "registers": {
    "general_purpose": [
      {"name": "x0", "size": 16, "alias": ["zero"], "description": "Always zero"},
      {"name": "x1", "size": 16, "alias": ["ra"], "description": "Return address"},
      {"name": "x2", "size": 16, "alias": ["sp"], "description": "Stack pointer"},
      {"name": "x3", "size": 16, "alias": ["s0"], "description": "Saved/Frame pointer"},
      {"name": "x4", "size": 16, "alias": ["s1"], "description": "Saved"},
      {"name": "x5", "size": 16, "alias": ["t1"], "description": "Temporary"},
      {"name": "x6", "size": 16, "alias": ["a0"], "description": "Argument 0/Return value"},
      {"name": "x7", "size": 16, "alias": ["a1"], "description": "Argument 1"}
    ]
  },
  "instructions": [
    {
      "mnemonic": "LI",
      "format": "I-type",
      "description": "Load immediate value",
      "syntax": "LI rd, imm",
      "semantics": "rd = imm",
      "implementation": "# Load immediate instruction\nimm_val = operands['imm']\ntruncated_val = imm_val & 0xFFFF\nwrite_register(operands['rd'], truncated_val)\n# Set flags\nset_flag('Z', truncated_val == 0)\nset_flag('N', (truncated_val & 0x8000) != 0)",
      "encoding": {
        "fields": [
          {"name": "funct4", "bits": "15:12", "value": "0010"},
          {"name": "imm", "bits": "11:6", "type": "immediate", "signed": true},
          {"name": "rd", "bits": "5:3", "type": "register"},
          {"name": "opcode", "bits": "2:0", "value": "001"}
        ]
      }
    },
    {
      "mnemonic": "ADD",
      "format": "R-type",
      "description": "Add registers (two-operand)",
      "syntax": "ADD rd, rs2",
      "semantics": "rd = rd + rs2",
      "implementation": "# Custom implementation for ADD instruction\nrd_val = read_register(operands['rd'])\nrs2_val = read_register(operands['rs2'])\nresult = (rd_val + rs2_val) & 0xFFFF\nwrite_register(operands['rd'], result)\n# Set flags\nset_flag('Z', result == 0)\nset_flag('N', (result & 0x8000) != 0)\nset_flag('C', (rd_val + rs2_val) > 0xFFFF)",
      "encoding": {
        "fields": [
          {"name": "funct4", "bits": "15:12", "value": "0000"},
          {"name": "rs2", "bits": "11:9", "type": "register"},
          {"name": "rd", "bits": "8:6", "type": "register"},
          {"name": "func3", "bits": "5:3", "value": "000"},
          {"name": "opcode", "bits": "2:0", "value": "000"}
        ]
      }
    },
    {
      "mnemonic": "MULT",
      "format": "R-type",
      "description": "Multiply registers (custom instruction)",
      "syntax": "MULT rd, rs2",
      "semantics": "rd = rd * rs2 (16-bit result)",
      "implementation": "# Custom multiplication instruction\nrd_val = read_register(operands['rd'])\nrs2_val = read_register(operands['rs2'])\nresult = (rd_val * rs2_val) & 0xFFFF\nwrite_register(operands['rd'], result)\n# Set flags\nset_flag('Z', result == 0)\nset_flag('N', (result & 0x8000) != 0)",
      "encoding": {
        "fields": [
          {"name": "funct4", "bits": "15:12", "value": "1111"},
          {"name": "rs2", "bits": "11:9", "type": "register"},
          {"name": "rd", "bits": "8:6", "type": "register"},
          {"name": "func3", "bits": "5:3", "value": "000"},
          {"name": "opcode", "bits": "2:0", "value": "000"}
        ]
      }
    },
    {
      "mnemonic": "SWAP",
      "format": "R-type",
      "description": "Swap register values (custom instruction)",
      "syntax": "SWAP rd, rs2",
      "semantics": "temp = rd; rd = rs2; rs2 = temp",
      "implementation": "# Custom swap instruction\nrd_val = read_register(operands['rd'])\nrs2_val = read_register(operands['rs2'])\nwrite_register(operands['rd'], rs2_val)\nwrite_register(operands['rs2'], rd_val)",
      "encoding": {
        "fields": [
          {"name": "funct4", "bits": "15:12", "value": "1110"},
          {"name": "rs2", "bits": "11:9", "type": "register"},
          {"name": "rd", "bits": "8:6", "type": "register"},
          {"name": "func3", "bits": "5:3", "value": "000"},
          {"name": "opcode", "bits": "2:0", "value": "000"}
        ]
      }
    },
    {
      "mnemonic": "MEMCPY",
      "format": "R-type",
      "description": "Memory copy instruction (custom)",
      "syntax": "MEMCPY rd, rs2",
      "semantics": "Copy 16 bytes from address in rs2 to address in rd",
      "implementation": "# Custom memory copy instruction\nsrc_addr = read_register(operands['rs2'])\ndst_addr = read_register(operands['rd'])\nfor i in range(16):\n    if src_addr + i < len(memory) and dst_addr + i < len(memory):\n        value = memory[src_addr + i]\n        memory[dst_addr + i] = value",
      "encoding": {
        "fields": [
          {"name": "funct4", "bits": "15:12", "value": "1101"},
          {"name": "rs2", "bits": "11:9", "type": "register"},
          {"name": "rd", "bits": "8:6", "type": "register"},
          {"name": "func3", "bits": "5:3", "value": "000"},
          {"name": "opcode", "bits": "2:0", "value": "000"}
        ]
      }
    },
    {
      "mnemonic": "CRC16",
      "format": "R-type",
      "description": "Calculate CRC16 (custom instruction)",
      "syntax": "CRC16 rd, rs2",
      "semantics": "rd = CRC16(rd, rs2)",
      "implementation": "# Custom CRC16 instruction\ndef crc16_update(crc, byte):\n    crc ^= byte\n    for _ in range(8):\n        if crc & 1:\n            crc = (crc >> 1) ^ 0xA001\n        else:\n            crc >>= 1\n    return crc\n\nrd_val = read_register(operands['rd'])\nrs2_val = read_register(operands['rs2'])\nresult = crc16_update(rd_val, rs2_val & 0xFF)\nwrite_register(operands['rd'], result)",
      "encoding": {
        "fields": [
          {"name": "funct4", "bits": "15:12", "value": "1100"},
          {"name": "rs2", "bits": "11:9", "type": "register"},
          {"name": "rd", "bits": "8:6", "type": "register"},
          {"name": "func3", "bits": "5:3", "value": "000"},
          {"name": "opcode", "bits": "2:0", "value": "000"}
        ]
      }
    }
  ],
  "directives": [
    {
      "name": ".magic",
      "description": "Custom directive that creates magic data",
      "action": "custom_magic",
      "argument_types": ["number"],
      "syntax": ".magic value",
      "examples": [".magic 42"],
      "implementation": "# Custom magic directive implementation\n# Creates a special pattern based on the input value\nvalue = int(args[0]) if args else 0\nmagic_pattern = value ^ 0xDEADBEEF\n# Create 4 bytes of magic data\nresult = []\nfor i in range(4):\n    result.append((magic_pattern >> (i * 8)) & 0xFF)\nresult = bytes(result)\n# Update current address\ncontext.current_address += len(result)\nassembler.context.current_address = context.current_address\nassembler.symbol_table.set_current_address(context.current_address)"
    },
    {
      "name": ".repeat",
      "description": "Custom directive that repeats a value multiple times",
      "action": "custom_repeat", 
      "argument_types": ["number", "number"],
      "syntax": ".repeat value count",
      "examples": [".repeat 0xFF 4"],
      "implementation": "# Custom repeat directive implementation\n# Repeats a value a specified number of times\nif len(args) >= 2:\n    # Handle hex values\n    value_str = args[0]\n    if value_str.startswith('0x'):\n        value = int(value_str, 16) & 0xFF\n    else:\n        value = int(value_str) & 0xFF\n    count = int(args[1])\n    result = bytes([value] * count)\n    # Update current address\n    context.current_address += len(result)\n    assembler.context.current_address = context.current_address\n    assembler.symbol_table.set_current_address(context.current_address)\nelse:\n    result = bytes()"
    }
  ],
  "assembly_syntax": {
    "comment_char": ";",
    "label_suffix": ":",
    "register_prefix": "",
    "immediate_prefix": "#",
    "hex_prefix": "0x",
    "binary_prefix": "0b",
    "case_sensitive": false
  }
} 