{
  "name": "CustomModularISA",
  "version": "1.0",
  "description": "A custom modular ISA for testing custom instructions and directives.",
  "instruction_size": 16,
  "word_size": 16,
  "endianness": "little",
  "address_space": {
    "size": 1024,
    "default_code_start": 0,
    "default_data_start": 512,
    "default_stack_start": 768,
    "memory_layout": {
      "interrupt_vectors": {"start": 0, "end": 15},
      "code_section": {"start": 0, "end": 511},
      "data_section": {"start": 512, "end": 767},
      "stack_section": {"start": 768, "end": 1023},
      "mmio": {"start": 1024, "end": 1023}
    }
  },
  "pc_behavior": {
    "points_to": "next_instruction",
    "offset_for_jumps": 0,
    "jump_offset_calculation": "target_minus_pc",
    "disassembly": {
      "jump_target_calculation": "pc_plus_offset",
      "pc_value_for_jumps": "instruction_address_plus_pc_offset"
    }
  },
  "instruction_architecture": {
    "instruction_size": 16,
    "instruction_size_bytes": 2,
    "variable_length": false,
    "alignment": 2,
    "max_instruction_length": 16,
    "address_bits": 10,
    "address_mask": "0x3FF",
    "pc_increment": 2,
    "immediate_widths": {
      "i_type": 10,
      "branch": 8,
      "jump": 10,
      "load_store": 6
    },
    "shift_config": {
      "type_width": 2,
      "amount_width": 4
    },
    "register_count": 4,
    "register_bits": 2
  },
  "register_formatting": {
    "prefix": "r",
    "suffix": "",
    "case": "lower",
    "zero_register": "r0",
    "alternatives": {
      "r0": ["zero"],
      "r1": ["one"],
      "r2": ["two"],
      "r3": ["three"]
    }
  },
  "operand_formatting": {
    "immediate_prefix": "#",
    "hex_prefix": "0x",
    "binary_prefix": "0b",
    "register_prefix": "r",
    "address_format": "0x{addr:X}",
    "immediate_format": "{value}",
    "register_format": "r{reg}",
    "separators": {
      "operand": ", ",
      "address": "(",
      "address_close": ")"
    },
    "disassembly": {
      "immediate_format": "decimal",
      "hex_threshold": 255,
      "negative_hex_threshold": -255,
      "always_decimal_for": ["CUSTIMM", "ADDI", "SLTI", "SLTUI", "SLLI", "SRLI", "SRAI", "ORI", "ANDI", "XORI"],
      "always_hex_for": ["LUI", "J", "JAL", "BEQ", "BNE", "BLT", "BGE", "BLTU", "BGEU", "BZ", "BNZ"]
    }
  },
  "instruction_categories": {
    "control_flow": {
      "jumps": ["J", "JAL", "JALR", "JR"],
      "branches": ["BEQ", "BNE", "BLT", "BGE", "BZ", "BNZ"],
      "calls": ["CALL", "ECALL"],
      "returns": ["RET", "JR"]
    },
    "data_movement": ["LW", "SW", "MOVE", "LI", "LUI", "AUIPC"],
    "arithmetic": ["ADD", "SUB", "CUSTADD", "SLT", "SLTU", "INC", "DEC"],
    "logical": ["AND", "OR", "XOR", "NOT", "NEG", "SLL", "SRL", "SRA"],
    "custom": ["CUSTADD", "CUSTIMM"],
    "stack": ["PUSH", "POP"]
  },
  "pseudo_instruction_fallbacks": {
    "hide_operands_by_default": false,
    "default_behavior": "show_operands",
    "fallback_rules": {
      "NOP": "hide_operands",
      "RET": "hide_operands",
      "INC": "hide_operands",
      "DEC": "hide_operands",
      "NOT": "hide_operands",
      "NEG": "hide_operands"
    }
  },
  "data_detection": {
    "string_encodings": ["ascii", "utf8"],
    "ascii_threshold": 0.8,
    "min_string_length": 3,
    "max_string_length": 100,
    "detect_zeros": true,
    "detect_patterns": ["repeating", "incrementing", "decrementing"]
  },
  "symbol_resolution": {
    "case_sensitive": false,
    "scope_rules": {
      "local": ".",
      "global": "",
      "external": "_"
    },
    "naming_conventions": {
      "functions": "func_{name}",
      "variables": "var_{name}",
      "constants": "CONST_{name}"
    },
    "precedence": ["local", "global", "external"]
  },
  "error_messages": {
    "unknown_instruction": "Unknown instruction '{instruction}' at line {line}",
    "invalid_operand": "Invalid operand '{operand}' for instruction '{instruction}'",
    "undefined_symbol": "Undefined symbol '{symbol}' referenced at line {line}",
    "invalid_address": "Invalid address {address} for {context}",
    "format": {
      "locale": "en_US",
      "date_format": "YYYY-MM-DD",
      "time_format": "HH:MM:SS"
    }
  },
  "constants": {
    "word_mask": {"value": 65535, "description": "16-bit word mask (0xFFFF)"},
    "sign_bit_mask": {"value": 32768, "description": "16-bit sign bit mask (0x8000)"},
    "max_signed_value": {"value": 32767, "description": "Maximum 16-bit signed value (0x7FFF)"},
    "min_signed_value": {"value": -32768, "description": "Minimum 16-bit signed value (-0x8000)"},
    "address_mask": {"value": 1023, "description": "10-bit address mask (0x3FF)"},
    "register_count": {"value": 4, "description": "Number of registers (r0-r3)"},
    "immediate_sign_bit_10": {"value": 512, "description": "10-bit immediate sign bit (0x200)"},
    "immediate_sign_extend_10": {"value": 64512, "description": "10-bit immediate sign extension (0xFC00)"},
    "branch_sign_extend_8": {"value": 65280, "description": "8-bit branch sign extension (0xFF00)"},
    "shift_amount_mask": {"value": 15, "description": "4-bit shift amount mask (0xF)"}
  },
  "registers": {
    "general_purpose": [
      {"name": "r0", "size": 16, "alias": ["zero"]},
      {"name": "r1", "size": 16, "alias": ["one"]},
      {"name": "r2", "size": 16, "alias": ["two"]},
      {"name": "r3", "size": 16, "alias": ["three"]}
    ]
  },
  "instructions": [
    {
      "mnemonic": "CUSTADD",
      "format": "R-type",
      "syntax": "CUSTADD rd, rs2",
      "encoding": {
        "fields": [
          {"name": "opcode", "bits": "15:12", "value": "1010"},
          {"name": "rs2", "bits": "11:10", "type": "register"},
          {"name": "rd", "bits": "9:8", "type": "register"},
          {"name": "unused", "bits": "7:0", "value": "00000000"}
        ]
      },
      "description": "Custom add: rd = rd + rs2",
      "semantics": "rd = rd + rs2",
      "implementation": "# Custom add implementation\nrd_val = read_register(operands['rd'])\nrs2_val = read_register(operands['rs2'])\nresult = (rd_val + rs2_val) & 0xFFFF\nwrite_register(operands['rd'], result)"
    },
    {
      "mnemonic": "CUSTIMM",
      "format": "I-type",
      "syntax": "CUSTIMM rd, imm",
      "encoding": {
        "fields": [
          {"name": "opcode", "bits": "15:12", "value": "1011"},
          {"name": "rd", "bits": "11:10", "type": "register"},
          {"name": "imm", "bits": "9:0", "type": "immediate", "signed": true}
        ]
      },
      "description": "Custom immediate: rd = imm",
      "semantics": "rd = imm",
      "implementation": "# Custom immediate implementation\nwrite_register(operands['rd'], operands['imm'])"
    }
  ],
  "directives": {
    ".customdata": {
      "action": "allocate_bytes",
      "implementation": "def customdata(ctx, node):\n    # Each argument is a 16-bit word\n    data = bytearray()\n    for arg in node.arguments:\n        value = int(arg)\n        data.extend(value.to_bytes(2, 'little'))\n    return data\n"
    }
  }
} 